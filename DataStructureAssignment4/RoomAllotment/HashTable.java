package com.metacue.hashmap;

/**
 * Hash Table implementation using array
 * @author Mahesh Chouhan
 *
 * @param <T> key class
 * @param <E> value class
 */
public class HashTable<T, E> {

	private T key;
	private E value;
	private int size;
	private E[] array;

	public E getValue() {
		return value;
	}

	public void setValue(E value) {
		this.value = value;
	}

	public T getKey() {
		return key;
	}

	public void setKey(T key) {
		this.key = key;
	}

	/**
	 * Create hash table of given size
	 * @param size
	 */
	@SuppressWarnings("unchecked")
	public HashTable(int size) {
		this.setSize(size);
		this.array = (E[]) new Object[size];
	}

	public int getSize() {
		return size;
	}

	public void setSize(int size) {
		this.size = size;

	}

	/**
	 * Checks if given key is already present in HashTable
	 * @param key
	 * @return True if key is already present and false if not
	 */
	public boolean containsKey(T key) {
		int index = key.hashCode() % size;
		
		//If any element is present at index generated by give key then return true
		if (array[index] == null) {
			return false;
		}
		return true;
	}

	/**
	 * Checks if HashTable is full
	 * @return True if HashTable is full otherwise false
	 */
	public boolean isFull() {
		int count = 0;
		for (int index = 0; index < size; index++) {
			//Count number of non null elements 
			if (array[index] != null)
				count++;
		}

		//If all elements are non null, then HashTable is full
		if (count == size)
			return true;
		else
			return false;

	}

	/**
	 * Put given value in hash table 
	 * @param key
	 * @param value
	 * @return index in hash table at which value is inserted
	 */
	public int put(T key, E value) {
		int insertIndex = -1;
		
		if (!isFull()) {
			int index = key.hashCode() % size;

			if (!containsKey(key)) {
				insertIndex = index % size;
				array[index] = value;
			} else {
				while (array[index % size] != null) {
					index++;
				}
				insertIndex = index % size;
				array[index % size] = value;
			}

		} else {
			System.out.println("HashTable is Full !");
		}

		return insertIndex;
	}

	/**
	 * Get value stored at given key
	 * @param key
	 * @return
	 */
	public E get(T key) {

		int index = key.hashCode() % size;

		return array[index];
	}

	/**
	 * Search for given value in the hash table
	 * @param value
	 * @return index of value in hash table if found otherwise return -1
	 */
	public int search(E value) {

		for (int index = 0; index < size; index++) {
			if (value.equals(array[index])) {
				return index;
			}
		}
		return -1;
	}

	public E[] getArray() {
		return array;
	}

	public void setArray(E[] array) {
		this.array = array;
	}

}
